# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018-2019, NEM
# This file is distributed under the same license as the nem2-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
# Translators:
# nem.cn <527357637@qq.com>, 2019
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nem2-docs 0.17.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-03-18 18:08+0000\n"
"PO-Revision-Date: 2019-02-22 09:13+0000\n"
"Last-Translator: nem.cn <527357637@qq.com>, 2019\n"
"Language-Team: Chinese (China) "
"(https://www.transifex.com/nemtech/teams/95744/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:11
msgid "Monitoring a transaction status"
msgstr "监控交易状态"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:13
msgid ""
"Make sure a :doc:`transaction <../../concepts/transaction>` gets included"
" in the blockchain after being announced."
msgstr "确保a :doc:`transaction <../../concepts/transaction>`在发布后被保存在区块链中。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:17
msgid "Background"
msgstr "背景"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:19
msgid ""
"After calling an API method that changes the database state, you usually "
"will receive a response if the change has been applied or failed due to "
"some constraint. The application spends precious time waiting for the "
"response, in the meanwhile other actions can be processed."
msgstr "在调用更改数据库状态的API方法后，如果由于应用了更改，或这些更改因为某些约束而失败，您通常会收到这些响应。应用程序会花费宝贵的时间等待响应，与此同时，应用程序会处理其他操作。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:21
msgid ""
"When working with blockchain technology, it is interesting to \"fire\" "
"the transaction, let the node process it, and receive a notification if "
"it succeeded or failed. Differently, from a traditional database, the "
"average confirmation time of modification is higher, passing from "
"milliseconds to seconds - or minutes in the worst case."
msgstr ""
"使用区块链技术时，有趣的是 “触发” 事务，让节点处理它，并在成功或失败时收到通知。 "
"不同的是，从传统的数据库来看，修改的平均确认时间更长，从最短的情况经过毫秒到秒 - 或几分钟。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:25
msgid "Prerequisites"
msgstr "先觉条件"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:27
msgid ""
"Finish the :doc:`getting started section <../../getting-started/setup-"
"workstation>`"
msgstr "完成 :doc:`入门学习指导 <../../getting-started/setup-workstation>`"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:31
msgid "Let’s get into some code"
msgstr "让我们来点代码"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:33
msgid ""
"Catapult enables asynchronous transaction announcement. After you publish"
" a transaction, the API node will always accept it if it is well-formed."
msgstr "Catapult支持异步事务通知。交易发布后，如果格式规范，API节点将接受它。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:35
msgid ""
"At this time, the server does not ensure that the transaction is valid - "
"for example, you don't have the amount of asset units you want to send-, "
"hence is not sure it will be added in a block."
msgstr "此时，服务器不确保交易有效 - 例如，您没有要发送的资产单位数量，因此不确定它是否会被添加到块中。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:37
msgid ""
"To make sure the transaction is added in a block, you must track the "
":doc:`transaction status <../../concepts/transaction>` using "
":ref:`Listeners <websockets>`."
msgstr ""
"要确保在块中添加事务，必须使用:ref:`Listeners <websockets>` 跟踪  :doc:`transaction status"
" <../../concepts/transaction>` 。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:39
msgid ""
"Listeners enable receiving notifications possible when a change in the "
"blockchain occurs. The notification is received in real time without "
"having to poll the API waiting for a reply."
msgstr "监听器可以在区块链发生变化时接收通知。 通知是实时接收的，无需轮询API等待回复。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:41
msgid ""
"Define the transaction you want to announce. In this case, we are going "
"to send the message ``Test`` to ``SD5DT3-CH4BLA-BL5HIM-EKP2TA-PUKF4N-"
"Y3L5HR-IR54``."
msgstr ""
"定义要宣布的交易。在这种情况下，我们将  ``Test`` 消息发送到``SD5DT3-CH4BLA-BL5HIM-EKP2TA-PUKF4N-"
"Y3L5HR-IR54``。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:45
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:54
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:64
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:73
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:87
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:101
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:115
#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:129
msgid "|monitoring-transactions-status-ts|"
msgstr "|monitoring-transactions-status-ts|"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:50
msgid "Sign the transaction."
msgstr "签署交易"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:60
msgid ""
"Open a new :ref:`Listeners <websockets>`. This communicates with the API "
"WebSocket, who will communicate you asynchronously the status of the "
"transaction."
msgstr "打开一个新的:ref:`Listeners <websockets>`。 它与API WebSocket通信，后者将异步通信您事务的状态。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:69
msgid ""
"Start monitoring if the WebSocket connection is alive. :doc:`Blocks "
"<../../concepts/block>` are generated every ``15`` seconds in average, so"
" a timeout can be raised if there is no response after 30 seconds "
"approximately."
msgstr ""
"如果WebSocket连接处于活动状态，则开始监视。:doc:`Blocks <../../concepts/block>` 平均 ``15`` "
"秒完成一次创建，所以如果大约30秒后没有响应就会产生超时。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:78
msgid "|listening-new-blocks-cli|"
msgstr "|listening-new-blocks-cli|"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:83
msgid ""
"Monitor if there is some validation error with the transaction issued. "
"When you receive a message from status WebSocket channel, it always means"
" the transaction did not meet the requirements. You need to handle the "
"error accordingly, by reviewing the :ref:`error status list <status-"
"errors>`."
msgstr ""
"监视发出的事务是否存在某些验证错误。 当您从状态WebSocket通道收到消息时，它始终表示事务不符合要求。 您需要通过查看 "
":ref:`错误状态列表<status-errors>`来相应地处理错误。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:92
msgid "|monitoring-transaction-status-error-cli|"
msgstr "|monitoring-transaction-status-error-cli|"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:97
msgid ""
"Monitor as well if the transaction reaches the network. When you receive "
"a message from unconfirmed WebSocket channel, the transaction is valid "
"and is waiting to be included in a block. This does not mean necessarily "
"that the transaction will be included, as a second validation happens "
"before being finally confirmed."
msgstr ""
"如果事务到达网络，也要监视。当您从未经证实的WebSocket通道收到消息时，该事务处于有效状态并等待被保存在块中。 "
"这并不意味着必须保存交易，因为第二次验证在最终确认之前发生。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:106
msgid "|monitoring-transaction-unconfirmed-cli|"
msgstr "|monitoring-transaction-unconfirmed-cli|"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:111
msgid ""
"Monitor when the transaction gets included in a block. When included, "
"transaction can still be :doc:`rolled-back <../../concepts/transaction>` "
"because of forks. You can decide for yourself that after e.g. 6 blocks "
"the `transaction is secured "
"<https://gist.github.com/aleixmorgadas/3d856d318e60f901be09dbd23467b374>`_."
msgstr ""
"监视事务何时保存在块中。当保存时，因为分叉，事务仍然可以是 :doc:`回滚 <../../ concepts / transaction>`的。"
" 你可以自己决定，例如 6个块 "
"``交易是安全的<https://gist.github.com/aleixmorgadas/3d856d318e60f901be09dbd23467b374>`_。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:120
msgid "|monitoring-transaction-confirmed-cli|"
msgstr "|monitoring-transaction-confirmed-cli|"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:125
msgid "Finally, announce the transaction to the network."
msgstr "最后，向网络发布交易。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:134
msgid "|sending-a-transfer-transaction-cli|"
msgstr "|sending-a-transfer-transaction-cli|"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:139
msgid ""
"If you missed the WebSocket response, check the transaction status after "
"by calling the `transaction status "
"<https://nemtech.github.io/endpoints.html#operation/getTransactionStatus>`_"
" endpoint. The status of failed transactions is not persistent, meaning "
"that eventually is pruned."
msgstr ""
"如果您错过了WebSocket响应，请通过调用 `transaction status "
"https://nemtech.github.io/endpoints.html#operation/getTransactionStatus>`_"
" 节点来检查事务状态。 失败事务的状态不是持久储存的，这这意味着它最终会被清理。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:141
msgid ""
"If you are developing a small application, and monitoring asynchronous "
"transactions adds too much overhead to your project, consider "
":doc:`turning asynchronous transactions announcement into synchronous "
"<turning-the-asynchronous-transaction-announcement-into-synchronous>`."
msgstr ""
"如果您正在开发一个小型应用程序，监视异步事务会给项目增加太大开销，请考虑 :doc:`将异步事务公告转换为同步<turning-the-"
"asynchronous-transaction-announcement-into-synchronous>`。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:147
msgid "Troubleshooting: Monitoring transactions on the client side"
msgstr "故障排除：监控客户端的事务"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:149
msgid ""
"The nem2-sdk for typescript base Listener was designed to work on Node.js"
" backend environments."
msgstr "typescript base Listener的nem2-sdk旨在用于Node.js后端环境。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:151
msgid ""
"To make the code work in the client side (e.g., Angular, React, Vue.), "
"pass the browser implementation of the WebSocket to the Listener."
msgstr "为了使代码在客户端工作（例如，Angular，React，Vue。），请将WebSocket的浏览器实现传递给Listener。"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:160
msgid "What's next?"
msgstr "下一步？"

#: ../../source/guides/transaction/monitoring-a-transaction-status.rst:162
msgid ""
"Run your application and try to :doc:`send a transfer transaction "
"<../transaction/sending-a-transfer-transaction>` to the selected account."
" If all goes well, you will see the transaction information in your "
"terminal."
msgstr ""
"运行您的应用程序并尝试 :doc:`将转让交易<../ transaction / sending-a-transfer-"
"transaction>发送到所选帐户。 如果一切顺利，您将在终端中看到交易信息。"

#~ msgid "Text editor or IDE"
#~ msgstr "文件编辑器或IDE"

#~ msgid "NEM2-SDK or CLI"
#~ msgstr "NEM2-SDK 或CLI"

