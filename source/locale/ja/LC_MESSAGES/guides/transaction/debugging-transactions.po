# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, NEM
# This file is distributed under the same license as the nem2-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Yoshiyuki Ieyama, 2018
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: nem2-docs 0.13\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-05 12:47+0900\n"
"PO-Revision-Date: 2018-10-26 13:37+0000\n"
"Last-Translator: Yoshiyuki Ieyama, 2018\n"
"Language-Team: Japanese (https://www.transifex.com/44uk-works/teams/92962/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../source/guides/transaction/debugging-transactions.rst:10
msgid "Debugging Transactions"
msgstr "トランザクションのデバッグ"

#: ../../source/guides/transaction/debugging-transactions.rst:12
msgid ""
"Create an application to monitor announced :doc:`transactions "
"<../../concepts/transaction>`."
msgstr ""
"アナウンス済みの :doc:`トランザクション <../../concepts/transaction>` を監視をするアプリケーションの作成をします。"

#: ../../source/guides/transaction/debugging-transactions.rst:16
msgid "Background"
msgstr "背景"

#: ../../source/guides/transaction/debugging-transactions.rst:18
msgid ""
"If you are used to NIS1 API calls, after announcing a transaction you will "
"receive a success message or some error indicating the reason why the "
"transaction has not been included in the block."
msgstr ""
"NIS1 の API "
"を使ったことがあるなら、トランザクションのアナウンスの後に成功メッセージまたはトランザクションがブロックに取り込まれなかった理由を示す何らかのエラーメッセージを受け取ることをご存じでしょう。"

#: ../../source/guides/transaction/debugging-transactions.rst:20
msgid ""
"The new Catapult REST API works differently, being *asynchronous*. When a "
"user announces a transaction through the API, it always returns an OK."
msgstr ""
"新しい Catapult REST API では *非同期的* な異なる動作をします。ユーザーが API "
"を経由してトランザクションをアナウンスすると、常にOKを返します。"

#: ../../source/guides/transaction/debugging-transactions.rst:22
msgid ""
"To know the status of the transaction, which can be OK or :doc:`Failure "
"<../../api/status-errors>`, you have to:"
msgstr ""

#: ../../source/guides/transaction/debugging-transactions.rst:24
msgid "Check the status via API endpoint."
msgstr "API エンドポイント経由でステータスを確認してください。"

#: ../../source/guides/transaction/debugging-transactions.rst:25
msgid ""
"Listen to the different :doc:`WebSocket<../../api/websockets>` channels."
msgstr "別の :doc:`WebSocket<../../api/websockets>` チャンネルを監視してください。"

#: ../../source/guides/transaction/debugging-transactions.rst:27
msgid ""
"While developing, it is encouraged to open terminals with different "
"listeners to monitor the transactions you send using NEM2-CLI."
msgstr "開発中は、NEM2-CLI を使って送ったトランザクションを監視するために、ターミナルで異なる複数のリスナーを使うことを推奨します。"

#: ../../source/guides/transaction/debugging-transactions.rst:31
msgid "Prerequisites"
msgstr "前提条件"

#: ../../source/guides/transaction/debugging-transactions.rst:33
msgid ""
"Finish the :doc:`getting started section <../../getting-started/setup-"
"workstation>`"
msgstr ":doc:`入門セクション <../../getting-started/setup-workstation>` を終了していること"

#: ../../source/guides/transaction/debugging-transactions.rst:34
msgid "Text editor or IDE"
msgstr "テキストエディタ または IDE"

#: ../../source/guides/transaction/debugging-transactions.rst:35
msgid "NEM2-SDK or CLI"
msgstr "NEM2-SDK または CLI"

#: ../../source/guides/transaction/debugging-transactions.rst:39
msgid "Let’s get into some code"
msgstr "それではコードを見ていきましょう"

#: ../../source/guides/transaction/debugging-transactions.rst:41
msgid ""
"Create a new listener to get notified every time a transaction related to "
"your account reaches the network and gets confirmed."
msgstr ""
"あなたのアカウントに関連するトランザクションがネットワークに到達し、承認されるたびに通知を受けられるように新しいリスナーを作成してください。"

#: ../../source/guides/transaction/debugging-transactions.rst:45
#: ../../source/guides/transaction/debugging-transactions.rst:64
#: ../../source/guides/transaction/debugging-transactions.rst:83
msgid "|debugging-transactions-confirmed-ts|"
msgstr ""

#: ../../source/guides/transaction/debugging-transactions.rst:50
#: ../../source/guides/transaction/debugging-transactions.rst:69
#: ../../source/guides/transaction/debugging-transactions.rst:88
msgid "|debugging-transactions-confirmed-java|"
msgstr ""

#: ../../source/guides/transaction/debugging-transactions.rst:55
#: ../../source/guides/transaction/debugging-transactions.rst:74
#: ../../source/guides/transaction/debugging-transactions.rst:93
msgid "|debugging-transactions-confirmed-js|"
msgstr ""

#: ../../source/guides/transaction/debugging-transactions.rst:60
msgid ""
"Open the connection. You only need to open the connection once. Then listen "
"to all desired channels."
msgstr "接続を開いてください。接続を開くだけでよく、それから望むすべてのチャンネルに接続してください。"

#: ../../source/guides/transaction/debugging-transactions.rst:79
msgid ""
"In this example, we will reach only transactions that get confirmed. You can"
" also create `other listeners <https://nemtech.github.io/nem2-sdk-"
"typescript-"
"javascript/classes/_infrastructure_listener_.listener.html#aggregatebondedadded>`_"
" to check unconfirmed, aggregate bounded or transactions that fail."
msgstr ""
"この例では、承認されたトランザクションだけに注目していました。`他のリスナー <https://nemtech.github.io/nem2-sdk-"
"typescript-"
"javascript/classes/_infrastructure_listener_.listener.html#aggregatebondedadded>`_"
" で、未承認、アグリゲートボンドや失敗したトランザクションをチェックすることもできます。"

#: ../../source/guides/transaction/debugging-transactions.rst:98
msgid "|debugging-transactions-confirmed-cli|"
msgstr ""

#: ../../source/guides/transaction/debugging-transactions.rst:107
msgid "Troubleshooting: Monitoring transactions on the client side"
msgstr "トラブルシューティング: クライアントサイドでのトランザクションの監視"

#: ../../source/guides/transaction/debugging-transactions.rst:109
msgid ""
"The nem2-sdk for typescript base listener was designed to work on Node.js "
"backend environments."
msgstr "Typescriptベースの nem2-sdk のリスナーはバックエンドのNode.jsで動作するように設計されています。"

#: ../../source/guides/transaction/debugging-transactions.rst:111
msgid ""
"To make the code work in the client side (e.g., Angular, React, Vue.), pass "
"the browser implementation of the WebSocket to the Listener."
msgstr ""
"このコードをクライアントサイド(例: Angular, React, Vue)で動作させるためには、WebSocket "
"のブラウザ実装をリスナーに渡します。"

#: ../../source/guides/transaction/debugging-transactions.rst:120
msgid "What's next?"
msgstr "次は？"

#: ../../source/guides/transaction/debugging-transactions.rst:122
msgid ""
"Run your application and try to :doc:`send a transfer transaction "
"<../transaction/sending-a-transfer-transaction>` to the selected account. If"
" all goes well, you will see the transaction information in your terminal."
msgstr ""
"あなたのアプリケーションを実行し、選択したアカウントへ :doc:`転送トランザクションを送信 <../transaction/sending-a"
"-transfer-transaction>` してみてください。すべてが上手く行けば、ターミナルにトランザクションの情報が表示されるでしょう。"
